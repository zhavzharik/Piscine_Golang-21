// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: nlo/nlo.proto

package nlo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetRespClient is the client API for GetResp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetRespClient interface {
	Do(ctx context.Context, in *Request, opts ...grpc.CallOption) (GetResp_DoClient, error)
}

type getRespClient struct {
	cc grpc.ClientConnInterface
}

func NewGetRespClient(cc grpc.ClientConnInterface) GetRespClient {
	return &getRespClient{cc}
}

func (c *getRespClient) Do(ctx context.Context, in *Request, opts ...grpc.CallOption) (GetResp_DoClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetResp_ServiceDesc.Streams[0], "/nlo.GetResp/Do", opts...)
	if err != nil {
		return nil, err
	}
	x := &getRespDoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetResp_DoClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type getRespDoClient struct {
	grpc.ClientStream
}

func (x *getRespDoClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetRespServer is the server API for GetResp service.
// All implementations must embed UnimplementedGetRespServer
// for forward compatibility
type GetRespServer interface {
	Do(*Request, GetResp_DoServer) error
	mustEmbedUnimplementedGetRespServer()
}

// UnimplementedGetRespServer must be embedded to have forward compatible implementations.
type UnimplementedGetRespServer struct {
}

func (UnimplementedGetRespServer) Do(*Request, GetResp_DoServer) error {
	return status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedGetRespServer) mustEmbedUnimplementedGetRespServer() {}

// UnsafeGetRespServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetRespServer will
// result in compilation errors.
type UnsafeGetRespServer interface {
	mustEmbedUnimplementedGetRespServer()
}

func RegisterGetRespServer(s grpc.ServiceRegistrar, srv GetRespServer) {
	s.RegisterService(&GetResp_ServiceDesc, srv)
}

func _GetResp_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetRespServer).Do(m, &getRespDoServer{stream})
}

type GetResp_DoServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type getRespDoServer struct {
	grpc.ServerStream
}

func (x *getRespDoServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// GetResp_ServiceDesc is the grpc.ServiceDesc for GetResp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetResp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nlo.GetResp",
	HandlerType: (*GetRespServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _GetResp_Do_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nlo/nlo.proto",
}
